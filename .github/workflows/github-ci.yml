name: Book Recognizer Backend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.10.6]

    env:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GOOGLE_BOOKS_API_KEY: ${{ secrets.GOOGLE_BOOKS_API_KEY }}
      GOOGLE_BOOKS_BASE_URL: ${{ secrets.GOOGLE_BOOKS_BASE_URL }}
      GOOGLE_BOOKS_URL_SUFFIX: ${{ secrets.GOOGLE_BOOKS_URL_SUFFIX }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      REGION: ${{ secrets.REGION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install PyTorch, torchvision, and torchaudio
      run: pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Install GroundingDINO
      run: |
        cd GroundingDINO
        pip install -e .
        cd ..

    - name: Create checkpoints directory and download checkpoints
      run: |
        mkdir checkpoints
        curl -L https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth -o checkpoints/sam_vit_h_4b8939.pth
        curl -L https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth -o checkpoints/groundingdino_swint_ogc.pth

    - name: Set up AWS credentials
      run: |
        mkdir -p $HOME/.aws
        echo "[default]" > $HOME/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> $HOME/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $HOME/.aws/credentials
        echo "[default]" > $HOME/.aws/config
        echo "region = ${{ secrets.REGION }}" >> $HOME/.aws/config

    - name: Run tests
      run: pytest

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/book-recognizer-backend:${{ github.sha }}

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Deploy to AWS Fargate
      run: |
        export ECR_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/book-recognizer-backend
        export TAG=${{ github.sha }}
        export AWS_REGION=${{ secrets.REGION }}
        # Replace with your own cluster and service names
        export CLUSTER_NAME=my-fargate-cluster
        export SERVICE_NAME=my-fargate-service

        # Register the new task definition
        TASK_DEFINITION=$(aws ecs register-task-definition \
          --family $SERVICE_NAME \
          --task-role-arn ${{ secrets.TASK_ROLE_ARN }} \
          --execution-role-arn ${{ secrets.EXECUTION_ROLE_ARN }} \
          --container-definitions "[{\"name\": \"${SERVICE_NAME}\", \"image\": \"${ECR_REPOSITORY}:${TAG}\", \"portMappings\": [{\"containerPort\": 80, \"hostPort\": 80, \"protocol\": \"tcp\"}], \"essential\": true, \"environment\": [{\"name\": \"REGION\", \"value\": \"${AWS_REGION}\"}], \"logConfiguration\": {\"logDriver\": \"awslogs\", \"options\": {\"awslogs-group\": \"${SERVICE_NAME}-logs\", \"awslogs-region\": \"${AWS_REGION}\", \"awslogs-stream-prefix\": \"${SERVICE_NAME}\"}} }]" \
          --requires-compatibilities FARGATE \
          --network-mode awsvpc \
          --cpu 4096 \
          --memory 16384 \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        # Update the service with the new task definition
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --task-definition $TASK_DEFINITION \
          --desired-count 1 \
          --force-new-deployment